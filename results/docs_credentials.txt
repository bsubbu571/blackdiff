results/docs/source/javascripts/lib/_lunr.js:333 - * A token wraps a string representation of a token
results/docs/source/javascripts/lib/_lunr.js:337 - * @param {string} [str=''] - The string token being wrapped.
results/docs/source/javascripts/lib/_lunr.js:340 - lunr.Token = function (str, metadata) {
results/docs/source/javascripts/lib/_lunr.js:346 - * Returns the token string that is being wrapped by this object.
results/docs/source/javascripts/lib/_lunr.js:355 - * A token update function is used when updating or optionally
results/docs/source/javascripts/lib/_lunr.js:371 - * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.
results/docs/source/javascripts/lib/_lunr.js:388 - return new lunr.Token (fn(this.str, this.metadata), this.metadata)
results/docs/source/javascripts/lib/_lunr.js:405 - * added as metadata to every token that is created from the object to be tokenized.
results/docs/source/javascripts/lib/_lunr.js:443 - new lunr.Token (
results/docs/source/javascripts/lib/_lunr.js:482 - * index of that token in the original list of all tokens and finally a list of
results/docs/source/javascripts/lib/_lunr.js:486 - * in the pipeline. To exclude a token from entering the index the function
results/docs/source/javascripts/lib/_lunr.js:507 - * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token
results/docs/source/javascripts/lib/_lunr.js:508 - * string as well as all known metadata. A pipeline function can mutate the token string
results/docs/source/javascripts/lib/_lunr.js:511 - * A pipeline function can indicate that the passed token should be discarded by returning
results/docs/source/javascripts/lib/_lunr.js:512 - * null, undefined or an empty string. This token will not be passed to any downstream pipeline
results/docs/source/javascripts/lib/_lunr.js:515 - * Multiple tokens can be returned by returning an array of tokens. Each token will be passed
results/docs/source/javascripts/lib/_lunr.js:521 - * @param {lunr.Token} token - A token from the document being processed.
results/docs/source/javascripts/lib/_lunr.js:522 - * @param {number} i - The index of this token in the complete list of tokens for this document/field.
results/docs/source/javascripts/lib/_lunr.js:696 - * token and mapping the resulting tokens back to strings.
results/docs/source/javascripts/lib/_lunr.js:698 - * @param {string} str - The string to pass through the pipeline.
results/docs/source/javascripts/lib/_lunr.js:704 - var token = new lunr.Token (str, metadata)
results/docs/source/javascripts/lib/_lunr.js:942 - * @param {lunr.Token} token - The string to stem
results/docs/source/javascripts/lib/_lunr.js:1165 - * @param {Array} token The token to pass through the filter
results/docs/source/javascripts/lib/_lunr.js:1165 - * @param {Array} token The token to pass through the filter
results/docs/source/javascripts/lib/_lunr.js:1177 - if (token && words[token.toString()] !== token.toString()) return token
results/docs/source/javascripts/lib/_lunr.js:1185 - * This is intended to be used in the Pipeline. If the token does not pass the
results/docs/source/javascripts/lib/_lunr.js:1185 - * This is intended to be used in the Pipeline. If the token does not pass the
results/docs/source/javascripts/lib/_lunr.js:1190 - * @params {lunr.Token} token - A token to check for being a stop word.
results/docs/source/javascripts/lib/_lunr.js:1333 - * @param {lunr.Token} token The token to pass through the filter
results/docs/source/javascripts/lib/_lunr.js:1333 - * @param {lunr.Token} token The token to pass through the filter
results/docs/source/javascripts/lib/_lunr.js:1350 - * A token set is used to store the unique list of all tokens
results/docs/source/javascripts/lib/_lunr.js:1351 - * within an index. Token sets are also used to represent an
results/docs/source/javascripts/lib/_lunr.js:1352 - * incoming query to the index, this query token set and index
results/docs/source/javascripts/lib/_lunr.js:1353 - * token set are then intersected to find which tokens to look
results/docs/source/javascripts/lib/_lunr.js:1356 - * A token set can hold multiple tokens, as in the case of the
results/docs/source/javascripts/lib/_lunr.js:1357 - * index token set, or it can hold a single token as in the
results/docs/source/javascripts/lib/_lunr.js:1358 - * case of a simple query token set.
results/docs/source/javascripts/lib/_lunr.js:1360 - * Additionally token sets are used to perform wildcard matching.
results/docs/source/javascripts/lib/_lunr.js:1364 - * Token sets are implemented as a minimal finite state automata,
results/docs/source/javascripts/lib/_lunr.js:1366 - * This helps to reduce the space used for storing the token set.
results/docs/source/javascripts/lib/_lunr.js:1406 - * Creates a token set from a query clause.
results/docs/source/javascripts/lib/_lunr.js:1423 - * Creates a token set representing a single string with a specified
results/docs/source/javascripts/lib/_lunr.js:1433 - * @param {string} str - The string to create the token set from.
results/docs/source/javascripts/lib/_lunr.js:1963 - // * expand terms from token set
results/docs/source/javascripts/lib/_lunr.js:1989 - * the case for terms with wildcards, we need to pass the clause
results/docs/source/javascripts/lib/_lunr.js:2019 - * From the term in the clause we create a token set which will then
results/docs/source/javascripts/lib/_lunr.js:2020 - * be used to intersect the indexes token set to get a list of terms
results/docs/source/javascripts/lib/_lunr.js:2521 - // store all whitelisted metadata about this token in the
results/docs/source/javascripts/lib/_lunr.js:2629 - * Creates a token set of all tokens in the index using lunr.TokenSet
results/docs/source/javascripts/lib/_lunr.js:2941 - * to a token or token-like string should be done before calling this method.
results/docs/source/javascripts/lib/_lunr.js:3127 - // It is possible for the user to change the separator on the
results/docs/source/javascripts/lib/_energize.js:32 - * Save xy coordinates when the user starts touching the screen
results/docs/source/javascripts/lib/_energize.js:42 - * Check if the user is scrolling past the threshold.
results/docs/source/javascripts/lib/_energize.js:56 - * If the user didn't scroll past the threshold between
results/docs/source/javascripts/lib/_energize.js:62 - // Don't fire a click if the user scrolled past the threshold
results/docs/source/javascripts/lib/_jquery.js:39 - // Pass this if window is not defined yet
results/docs/source/javascripts/lib/_jquery.js:446 - // that pass the validator function
results/docs/source/javascripts/lib/_jquery.js:1315 - // So, we allow :focus to pass through QSA all the time to avoid the IE error
results/docs/source/javascripts/lib/_jquery.js:2060 - // The user may use createPseudo to indicate that
results/docs/source/javascripts/lib/_jquery.js:2305 - for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
results/docs/source/javascripts/lib/_jquery.js:2653 - // If the preceding token was a descendant combinator, insert an implicit any-element `*`
results/docs/source/javascripts/lib/_jquery.js:2852 - if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
results/docs/source/javascripts/lib/_jquery.js:2871 - token = tokens[ i ];
results/docs/source/javascripts/lib/_jquery.js:3284 - // Don't pass non-elements to Sizzle
results/docs/source/javascripts/lib/_jquery.js:3816 - // Only substitute handlers pass on context
results/docs/source/javascripts/lib/_jquery.js:3847 - // Only substitute handlers pass on context
results/docs/source/javascripts/lib/_jquery.js:4388 - var dataUser = new Data();
results/docs/source/javascripts/lib/_jquery.js:4397 - //	3. Use the same single mechanism to support "private" and "user" data.
results/docs/source/javascripts/lib/_jquery.js:4398 - //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
results/docs/source/javascripts/lib/_jquery.js:4399 - //	5. Avoid exposing implementation details on user objects (eg. expando properties)
results/docs/source/javascripts/lib/_jquery.js:5206 - // Caller can pass in an object of custom data in lieu of the handler
results/docs/source/javascripts/lib/_jquery.js:6010 - // 2. Copy user data
results/docs/source/javascripts/lib/_jquery.js:6529 - // some versions of this test; make sure not to make it pass there!
results/docs/source/javascripts/lib/_jquery.js:8659 - // Caller can pass in a jQuery.Event object, Object, or just an event type string
results/docs/source/javascripts/lib/_jquery.js:9306 - username: null,
results/docs/source/javascripts/lib/_jquery.js:9307 - password: null,
results/docs/source/javascripts/lib/_jquery.js:9870 - // Make this explicit, since user can override this through ajaxSetup (#11264)
results/docs/source/javascripts/lib/_jquery.js:10389 - // user can override it through ajaxSetup method
