results/web-code-test-server/index.js:4 - var jwt = require("jsonwebtoken");
results/web-code-test-server/index.js:30 - // POST /login with JSON-encoded body {"email": "...", "password": "..."}
results/web-code-test-server/index.js:30 - // POST /login with JSON-encoded body {"email": "...", "password": "..."}
results/web-code-test-server/index.js:31 - //  - returns 401 and JSON-encoded error if the password isn't hunter2
results/web-code-test-server/index.js:32 - //  - returns 200 and {"token": "..."} otherwise. This token can be used in subsequent requests
results/web-code-test-server/index.js:35 - if(req.body["password"] != "hunter2") {
results/web-code-test-server/index.js:40 - // init a database for this user if there isn't one already
results/web-code-test-server/index.js:44 - accessToken: jwt.sign({
results/web-code-test-server/index.js:58 - var decodeToken = function(tokenString) {
results/web-code-test-server/index.js:66 - req.token = decodeToken(req.headers["authorization"]);
results/web-code-test-server/index.js:68 - return res.status(401).json({error: "Access token invalid or couldn't be parsed. Please log in using /login."});
results/web-code-test-server/index.js:96 - "message": "The API is alive and your access token is valid :)",
results/web-code-test-server/index.js:97 - "token": req.token
results/web-code-test-server/package.json:23 - "jsonwebtoken": "^5.5.4",
results/web-code-test-server/database.js:5 - var _getAppsForUser = function(userId) {
results/web-code-test-server/database.js:11 - var _getAppForUser = function(userId, appId) {
results/web-code-test-server/database.js:31 - // Ensures that there's data in this user's database
results/web-code-test-server/database.js:32 - var initUser = function(userId) {
results/web-code-test-server/database.js:106 - initUser: initUser,
