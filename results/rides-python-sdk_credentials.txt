results/rides-python-sdk/tests/test_client.py:45 - SERVER_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_client.py:47 - ACCESS_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_client.py:48 - REFRESH_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_client.py:307 - """Create OAuth2Credential class to hold access token information."""
results/rides-python-sdk/tests/test_client.py:311 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_client.py:316 - refresh_token=REFRESH_TOKEN,
results/rides-python-sdk/tests/test_client.py:322 - """Create OAuth2Credential class to hold access token information."""
results/rides-python-sdk/tests/test_client.py:326 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_client.py:331 - refresh_token=REFRESH_TOKEN,
results/rides-python-sdk/tests/test_client.py:337 - """Create OAuth2Credential class to hold access token information."""
results/rides-python-sdk/tests/test_client.py:340 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_client.py:350 - """Create an UberRidesClient in Sandbox Mode with OAuth 2.0 Credentials."""
results/rides-python-sdk/tests/test_client.py:357 - """Create an UberRidesClient in Production with OAuth 2.0 Credentials."""
results/rides-python-sdk/tests/test_client.py:364 - """Create an UberRidesClient in Production with OAuth 2.0 Credentials."""
results/rides-python-sdk/tests/test_client.py:371 - """Create an UberRidesClient in Sandbox Mode with OAuth 2.0 Credentials."""
results/rides-python-sdk/tests/test_client.py:378 - """Create an UberRidesClient in Production with OAuth 2.0 Credentials."""
results/rides-python-sdk/tests/test_client.py:386 - session = Session(server_token=SERVER_TOKEN)
results/rides-python-sdk/tests/test_client.py:421 - """Test to fetch products with access token and server token."""
results/rides-python-sdk/tests/test_client.py:442 - """Test fetch product by ID with access token and server token."""
results/rides-python-sdk/tests/test_client.py:459 - """Test to fetch price estimates with access token and server token."""
results/rides-python-sdk/tests/test_client.py:487 - """Test to fetch time estimates with access token and server token."""
results/rides-python-sdk/tests/test_client.py:509 - """Test to fetch promotions with access token and server token."""
results/rides-python-sdk/tests/test_client.py:528 - """Test to fetch user activity with access token."""
results/rides-python-sdk/tests/test_client.py:532 - # assert response looks like user activity
results/rides-python-sdk/tests/test_client.py:544 - """Test to fetch user activity with access token."""
results/rides-python-sdk/tests/test_client.py:548 - # assert response looks like user activity
results/rides-python-sdk/tests/test_client.py:560 - """Test to fetch user profile with access token."""
results/rides-python-sdk/tests/test_client.py:564 - # assert response looks like user profile
results/rides-python-sdk/tests/test_client.py:571 - """Test to fetch user profile with access token."""
results/rides-python-sdk/tests/test_client.py:575 - # assert response looks like user profile
results/rides-python-sdk/tests/test_client.py:865 - """Test to update a user's home address with an access token."""
results/rides-python-sdk/tests/test_client.py:877 - """Test to fetch a user's home address with an access token."""
results/rides-python-sdk/tests/test_client.py:889 - """Test to update a user's work address with an access token."""
results/rides-python-sdk/tests/test_client.py:901 - """Test to fetch a user's work address with an access token."""
results/rides-python-sdk/tests/test_session.py:38 - SERVER_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_session.py:40 - ACCESS_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_session.py:41 - REFRESH_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_session.py:57 - server_token=SERVER_TOKEN,
results/rides-python-sdk/tests/test_session.py:63 - """Create a Session from Auth Code Grant Credential."""
results/rides-python-sdk/tests/test_session.py:67 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_session.py:72 - refresh_token=REFRESH_TOKEN,
results/rides-python-sdk/tests/test_session.py:84 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_session.py:89 - refresh_token=None,
results/rides-python-sdk/tests/test_session.py:101 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_session.py:106 - refresh_token=None,
results/rides-python-sdk/tests/test_session.py:121 - 'access_token': ACCESS_TOKEN,
results/rides-python-sdk/tests/test_session.py:124 - 'refresh_token': REFRESH_TOKEN,
results/rides-python-sdk/tests/test_session.py:139 - 'access_token': ACCESS_TOKEN,
results/rides-python-sdk/tests/test_session.py:149 - """Confirm Session with Server Token initialized correctly."""
results/rides-python-sdk/tests/test_session.py:150 - assert server_token_session.server_token == SERVER_TOKEN
results/rides-python-sdk/tests/test_session.py:157 - assert authorization_code_grant_session.server_token is None
results/rides-python-sdk/tests/test_session.py:160 - assert oauth2.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_session.py:163 - assert oauth2.refresh_token is REFRESH_TOKEN
results/rides-python-sdk/tests/test_session.py:169 - """Confirm that a new Session from Auth Code Grant is not stale."""
results/rides-python-sdk/tests/test_session.py:170 - assert authorization_code_grant_session.server_token is None
results/rides-python-sdk/tests/test_session.py:178 - assert implicit_grant_session.server_token is None
results/rides-python-sdk/tests/test_session.py:188 - assert client_credential_grant_session.server_token is None
results/rides-python-sdk/tests/test_session.py:197 - """Confirm that an old Session from Auth Code Grant is stale."""
results/rides-python-sdk/tests/test_session.py:228 - assert oauth2credential.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_session.py:231 - assert oauth2credential.refresh_token == REFRESH_TOKEN
results/rides-python-sdk/tests/test_session.py:248 - assert oauth2credential.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_session.py:251 - assert oauth2credential.refresh_token is None
results/rides-python-sdk/tests/test_auth.py:39 - from uber_rides.auth import AuthorizationCodeGrant
results/rides-python-sdk/tests/test_auth.py:40 - from uber_rides.auth import ClientCredentialGrant
results/rides-python-sdk/tests/test_auth.py:41 - from uber_rides.auth import ImplicitGrant
results/rides-python-sdk/tests/test_auth.py:42 - from uber_rides.auth import refresh_access_token
results/rides-python-sdk/tests/test_auth.py:52 - ACCESS_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_auth.py:53 - REFRESH_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_auth.py:54 - REFRESHED_ACCESS_TOKEN = 'xxx'
results/rides-python-sdk/tests/test_auth.py:55 - STATE_TOKEN = 'rides-sdk'
results/rides-python-sdk/tests/test_auth.py:86 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_auth.py:90 - refresh_token=REFRESH_TOKEN,
results/rides-python-sdk/tests/test_auth.py:109 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_auth.py:113 - refresh_token=None,
results/rides-python-sdk/tests/test_auth.py:132 - access_token=ACCESS_TOKEN,
results/rides-python-sdk/tests/test_auth.py:136 - refresh_token=None,
results/rides-python-sdk/tests/test_auth.py:167 - """Test to get OAuth 2.0 session for authorization code grant."""
results/rides-python-sdk/tests/test_auth.py:168 - auth_code_grant.state_token = STATE_TOKEN
results/rides-python-sdk/tests/test_auth.py:177 - assert session.server_token is None
results/rides-python-sdk/tests/test_auth.py:180 - assert credential.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_auth.py:181 - assert credential.refresh_token == REFRESH_TOKEN
results/rides-python-sdk/tests/test_auth.py:191 - """Test to refresh OAuth 2.0 session for authorization code grant."""
results/rides-python-sdk/tests/test_auth.py:194 - assert session.server_token is None
results/rides-python-sdk/tests/test_auth.py:197 - assert credential.access_token == REFRESHED_ACCESS_TOKEN
results/rides-python-sdk/tests/test_auth.py:231 - """Test to get OAuth 2.0 session from URL for implicit grant."""
results/rides-python-sdk/tests/test_auth.py:233 - '{}#access_token={}&token_type=Bearer&state=None'
results/rides-python-sdk/tests/test_auth.py:239 - assert session.server_token is None
results/rides-python-sdk/tests/test_auth.py:242 - assert credential.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_auth.py:248 - assert credential.refresh_token is None
results/rides-python-sdk/tests/test_auth.py:261 - """Test to get OAuth 2.0 session for client credential grant."""
results/rides-python-sdk/tests/test_auth.py:264 - assert session.server_token is None
results/rides-python-sdk/tests/test_auth.py:267 - assert credential.access_token == ACCESS_TOKEN
results/rides-python-sdk/tests/test_auth.py:272 - assert credential.refresh_token is None
results/rides-python-sdk/tests/test_auth.py:280 - """Test to refresh OAuth 2.0 session for client credential grant."""
results/rides-python-sdk/tests/test_auth.py:283 - assert session.server_token is None
results/rides-python-sdk/tests/test_auth.py:286 - assert credential.access_token == REFRESHED_ACCESS_TOKEN
results/rides-python-sdk/tests/test_auth.py:292 - assert credential.refresh_token is None
results/rides-python-sdk/uber_rides/request.py:78 - Session object containing OAuth 2.0 credentials. Optional
results/rides-python-sdk/uber_rides/request.py:161 - The Session object containing OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/request.py:174 - token = auth_session.server_token
results/rides-python-sdk/uber_rides/request.py:176 - token = auth_session.oauth2credential.access_token
results/rides-python-sdk/uber_rides/request.py:197 - Type of token to access resources.
results/rides-python-sdk/uber_rides/request.py:198 - token (str)
results/rides-python-sdk/uber_rides/request.py:199 - Server Token or OAuth 2.0 Access Token.
results/rides-python-sdk/uber_rides/request.py:203 - True iff token_type and token are valid.
results/rides-python-sdk/uber_rides/request.py:210 - # True if token only contains allowed_chars
results/rides-python-sdk/uber_rides/session.py:40 - A Session can be initialized with a Server Token or with a set of
results/rides-python-sdk/uber_rides/session.py:41 - OAuth 2.0 Credentials, but not with both. A Session uses credentials
results/rides-python-sdk/uber_rides/session.py:47 - server_token=None,
results/rides-python-sdk/uber_rides/session.py:53 - sever_token (str)
results/rides-python-sdk/uber_rides/session.py:57 - Access token and additional OAuth 2.0 credentials used
results/rides-python-sdk/uber_rides/session.py:63 - both server token and access token.
results/rides-python-sdk/uber_rides/session.py:65 - if server_token and oauth2credential:
results/rides-python-sdk/uber_rides/session.py:68 - 'and OAuth 2.0 Credentials.'
results/rides-python-sdk/uber_rides/session.py:72 - if server_token is None and oauth2credential is None:
results/rides-python-sdk/uber_rides/session.py:75 - 'Token or OAuth 2.0 Credentials.'
results/rides-python-sdk/uber_rides/session.py:80 - self.server_token = server_token
results/rides-python-sdk/uber_rides/session.py:87 - self.server_token = None
results/rides-python-sdk/uber_rides/session.py:91 - """A class to store OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/session.py:93 - OAuth 2.0 credentials are used to properly construct requests
results/rides-python-sdk/uber_rides/session.py:108 - refresh_token=None,
results/rides-python-sdk/uber_rides/session.py:115 - access_token (str)
results/rides-python-sdk/uber_rides/session.py:116 - Access token received from OAuth 2.0 Authorization.
results/rides-python-sdk/uber_rides/session.py:118 - Seconds after initial grant when access token will expire.
results/rides-python-sdk/uber_rides/session.py:124 - Type of OAuth 2.0 Grant used to obtain access token.
results/rides-python-sdk/uber_rides/session.py:130 - refresh_token (str)
results/rides-python-sdk/uber_rides/session.py:131 - Optional refresh token used to get a new access token.
results/rides-python-sdk/uber_rides/session.py:135 - self.access_token = access_token
results/rides-python-sdk/uber_rides/session.py:141 - self.refresh_token = refresh_token
results/rides-python-sdk/uber_rides/session.py:158 - HTTP Response containing OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/session.py:160 - Type of OAuth 2.0 Grant used to obtain access token.
results/rides-python-sdk/uber_rides/session.py:177 - message = 'Error with Access Token Request: {}'
results/rides-python-sdk/uber_rides/session.py:191 - access_token=response.get('access_token'),
results/rides-python-sdk/uber_rides/session.py:195 - refresh_token=response.get('refresh_token', None),
results/rides-python-sdk/uber_rides/session.py:199 - """Check whether the session's current access token is about to expire.
results/rides-python-sdk/uber_rides/session.py:203 - True if access_token expires within threshold
results/rides-python-sdk/uber_rides/client.py:25 - your server token or OAuth 2.0 credentials. Your usage of this
results/rides-python-sdk/uber_rides/client.py:45 - from uber_rides.auth import refresh_access_token
results/rides-python-sdk/uber_rides/client.py:46 - from uber_rides.auth import revoke_access_token
results/rides-python-sdk/uber_rides/client.py:245 - """Get activity about the user's lifetime activity with Uber.
results/rides-python-sdk/uber_rides/client.py:266 - """Get activity about the user's lifetime activity with Uber.
results/rides-python-sdk/uber_rides/client.py:436 - user's last used payment method.
results/rides-python-sdk/uber_rides/client.py:446 - User must confirm surge price through surge_confirmation_href.
results/rides-python-sdk/uber_rides/client.py:493 - A Response object containing details about a user's
results/rides-python-sdk/uber_rides/client.py:557 - """Cancel the user's current trip.
results/rides-python-sdk/uber_rides/client.py:703 - """Retrieve a list of the user's available payment methods.
results/rides-python-sdk/uber_rides/client.py:707 - A Response object containing information about a user's
results/rides-python-sdk/uber_rides/client.py:713 - """Refresh session's OAuth 2.0 credentials if they are stale."""
results/rides-python-sdk/uber_rides/client.py:723 - """Revoke the session's OAuth 2.0 credentials."""
results/rides-python-sdk/uber_rides/client.py:916 - 'User must confirm surge by visiting the confirmation url.'
results/rides-python-sdk/uber_rides/auth.py:21 - """An internal module to handle OAuth 2.0 Authorization.
results/rides-python-sdk/uber_rides/auth.py:29 - Each OAuth 2.0 grant uses your app credentials to start an
results/rides-python-sdk/uber_rides/auth.py:31 - a Session is created, which stores the OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:62 - """The parent class for all OAuth 2.0 grant types."""
results/rides-python-sdk/uber_rides/auth.py:65 - """Initialize OAuth 2.0 Class.
results/rides-python-sdk/uber_rides/auth.py:84 - """Form URL to request an auth code or access token.
results/rides-python-sdk/uber_rides/auth.py:89 - 'token' (Implicit Grant)
results/rides-python-sdk/uber_rides/auth.py:91 - The URL that the Uber server will redirect the user to after
results/rides-python-sdk/uber_rides/auth.py:96 - Optional CSRF State token to send to server.
results/rides-python-sdk/uber_rides/auth.py:126 - the user authorized your app.
results/rides-python-sdk/uber_rides/auth.py:151 - the user authorize your app. The second involves getting an OAuth 2.0
results/rides-python-sdk/uber_rides/auth.py:151 - the user authorize your app. The second involves getting an OAuth 2.0
results/rides-python-sdk/uber_rides/auth.py:152 - access token from Uber.
results/rides-python-sdk/uber_rides/auth.py:161 - state_token=None,
results/rides-python-sdk/uber_rides/auth.py:175 - The URL that the Uber server will redirect the user to after
results/rides-python-sdk/uber_rides/auth.py:179 - state_token (str)
results/rides-python-sdk/uber_rides/auth.py:180 - The CSRF State Token used to create an authorization.
results/rides-python-sdk/uber_rides/auth.py:186 - # generate or set state token if not false
results/rides-python-sdk/uber_rides/auth.py:187 - self.state_token = False
results/rides-python-sdk/uber_rides/auth.py:188 - if state_token is None:
results/rides-python-sdk/uber_rides/auth.py:189 - self.state_token = self._generate_state_token()
results/rides-python-sdk/uber_rides/auth.py:191 - if state_token is not False:
results/rides-python-sdk/uber_rides/auth.py:192 - self.state_token = state_token
results/rides-python-sdk/uber_rides/auth.py:207 - This function starts the OAuth 2.0 authorization process and builds an
results/rides-python-sdk/uber_rides/auth.py:208 - authorization URL. You should redirect your user to this URL, where
results/rides-python-sdk/uber_rides/auth.py:214 - Tell the user to visit this URL and approve your app.
results/rides-python-sdk/uber_rides/auth.py:223 - """Verify response from the Uber Auth server.
results/rides-python-sdk/uber_rides/auth.py:228 - after user approved your app and was redirected.
results/rides-python-sdk/uber_rides/auth.py:232 - Code received when user grants your app access. Use this code
results/rides-python-sdk/uber_rides/auth.py:242 - if self.state_token is not False:
results/rides-python-sdk/uber_rides/auth.py:243 - # Check CSRF State Token against state token from GET request
results/rides-python-sdk/uber_rides/auth.py:244 - received_state_token = query_params.get('state')
results/rides-python-sdk/uber_rides/auth.py:245 - if received_state_token is None:
results/rides-python-sdk/uber_rides/auth.py:249 - if self.state_token != received_state_token:
results/rides-python-sdk/uber_rides/auth.py:280 - The redirect URL received after the user has authorized
results/rides-python-sdk/uber_rides/auth.py:287 - the user authorized your app.
results/rides-python-sdk/uber_rides/auth.py:291 - A Session object with OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:324 - receives the access token as the result of the authorization request.
results/rides-python-sdk/uber_rides/auth.py:338 - The URL that the Uber server will redirect the user to after
results/rides-python-sdk/uber_rides/auth.py:364 - the user authorized your app.
results/rides-python-sdk/uber_rides/auth.py:368 - A Session object with OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:387 - access_token=query_params.get('access_token'),
results/rides-python-sdk/uber_rides/auth.py:399 - The client credential grant type is used to request an access token using
results/rides-python-sdk/uber_rides/auth.py:428 - A Session object with OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:454 - refresh_token=None
results/rides-python-sdk/uber_rides/auth.py:474 - refresh_token (str)
results/rides-python-sdk/uber_rides/auth.py:475 - Refresh token used to get a new access token.
results/rides-python-sdk/uber_rides/auth.py:499 - 'refresh_token': refresh_token,
results/rides-python-sdk/uber_rides/auth.py:507 - message = 'Failed to request access token: {}.'
results/rides-python-sdk/uber_rides/auth.py:513 - """Use a refresh token to request a new access token.
results/rides-python-sdk/uber_rides/auth.py:519 - An authorized user's OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:519 - An authorized user's OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:523 - A new Session object with refreshed OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:527 - Raised if OAuth 2.0 grant type does not support
results/rides-python-sdk/uber_rides/auth.py:536 - refresh_token=credential.refresh_token,
results/rides-python-sdk/uber_rides/auth.py:574 - All future requests with the access token will be invalid.
results/rides-python-sdk/uber_rides/auth.py:578 - An authorized user's OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:578 - An authorized user's OAuth 2.0 credentials.
results/rides-python-sdk/uber_rides/auth.py:587 - 'token': credential.access_token,
results/rides-python-sdk/uber_rides/auth.py:597 - message = 'Failed to revoke access token: {}.'
results/rides-python-sdk/uber_rides/utils/http.py:38 - 'unauthorized': 'Invalid OAuth 2.0 credentials provided.',
results/rides-python-sdk/uber_rides/utils/http.py:46 - VALID_TOKEN_TYPES = frozenset(['Token', 'Bearer'])
results/rides-python-sdk/uber_rides/utils/auth.py:26 - REFRESH_TOKEN = 'refresh_token'
results/rides-python-sdk/example/authorize_rider.py:21 - """Initializes an UberRidesClient with OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_rider.py:23 - This example demonstrates how to get an access token through the
results/rides-python-sdk/example/authorize_rider.py:24 - OAuth 2.0 Authorization Code Grant and use credentials to create
results/rides-python-sdk/example/authorize_rider.py:32 - (4) User OAuth 2.0 credentials are recorded in
results/rides-python-sdk/example/authorize_rider.py:32 - (4) User OAuth 2.0 credentials are recorded in
results/rides-python-sdk/example/authorize_rider.py:51 - from uber_rides.auth import AuthorizationCodeGrant
results/rides-python-sdk/example/authorize_rider.py:59 - """Get an access token through Authorization Code Grant.
results/rides-python-sdk/example/authorize_rider.py:66 - Filename to store OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_rider.py:70 - An UberRidesClient with OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_rider.py:80 - login_message = 'Login as a rider and grant access by going to:\n\n{}\n'
results/rides-python-sdk/example/authorize_rider.py:99 - 'access_token': credential.access_token,
results/rides-python-sdk/example/authorize_rider.py:104 - 'refresh_token': credential.refresh_token,
results/rides-python-sdk/example/authorize_rider.py:118 - An UberRidesClient with OAuth 2.0 credentials.
results/rides-python-sdk/example/authorize_rider.py:133 - message = 'Hello, {} {}. Successfully granted access token to {}.'
results/rides-python-sdk/example/authorize_rider.py:152 - Get an access token through the OAuth 2.0 Authorization Code Grant
results/rides-python-sdk/example/authorize_driver.py:21 - """Initializes an UberRidesClient with OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_driver.py:23 - This example demonstrates how to get an access token through the
results/rides-python-sdk/example/authorize_driver.py:24 - OAuth 2.0 Authorization Code Grant and use credentials to create
results/rides-python-sdk/example/authorize_driver.py:32 - (4) User OAuth 2.0 credentials are recorded in
results/rides-python-sdk/example/authorize_driver.py:32 - (4) User OAuth 2.0 credentials are recorded in
results/rides-python-sdk/example/authorize_driver.py:51 - from uber_rides.auth import AuthorizationCodeGrant
results/rides-python-sdk/example/authorize_driver.py:59 - """Get an access token through Authorization Code Grant.
results/rides-python-sdk/example/authorize_driver.py:66 - Filename to store OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_driver.py:70 - An UberRidesClient with OAuth 2.0 Credentials.
results/rides-python-sdk/example/authorize_driver.py:80 - login_message = 'Login as a driver and grant access by going to:\n\n{}\n'
results/rides-python-sdk/example/authorize_driver.py:99 - 'access_token': credential.access_token,
results/rides-python-sdk/example/authorize_driver.py:104 - 'refresh_token': credential.refresh_token,
results/rides-python-sdk/example/authorize_driver.py:118 - An UberRidesClient with OAuth 2.0 credentials.
results/rides-python-sdk/example/authorize_driver.py:133 - message = 'Hello, {} {}. Successfully granted access token to {}.'
results/rides-python-sdk/example/authorize_driver.py:152 - Get an access token through the OAuth 2.0 Authorization Code Grant
results/rides-python-sdk/example/utils.py:39 - # where your OAuth 2.0 credentials are stored
results/rides-python-sdk/example/utils.py:134 - """Import OAuth 2.0 session credentials from storage file.
results/rides-python-sdk/example/utils.py:148 - # depending on OAuth 2.0 grant_type, these values may not exist
results/rides-python-sdk/example/utils.py:151 - refresh_token = storage.get('refresh_token')
results/rides-python-sdk/example/utils.py:154 - 'access_token': storage['access_token'],
results/rides-python-sdk/example/utils.py:160 - 'refresh_token': refresh_token,
results/rides-python-sdk/example/utils.py:168 - """Create an UberRidesClient from OAuth 2.0 credentials.
results/rides-python-sdk/example/utils.py:172 - Dictionary of OAuth 2.0 credentials.
results/rides-python-sdk/example/utils.py:180 - access_token=credentials.get('access_token'),
results/rides-python-sdk/example/utils.py:186 - refresh_token=credentials.get('refresh_token'),
results/rides-python-sdk/example/driver_dashboard.py:7 - from uber_rides.auth import AuthorizationCodeGrant
results/rides-python-sdk/example/driver_dashboard.py:31 - """Index controller to redirect user to sign in with uber."""
results/rides-python-sdk/example/driver_dashboard.py:37 - """Connect controller to handle token exchange and query Uber API."""
results/rides-python-sdk/example/driver_dashboard.py:39 - # Exchange authorization code for acceess token and create session
results/rides-python-sdk/example/request_ride.py:29 - (1) Run `python authorize_rider.py` to get OAuth 2.0 Credentials
results/rides-python-sdk/example/request_ride.py:260 - Create an UberRidesClient from OAuth 2.0 Credentials, update a sandbox
results/rides-python-sdk/example/rider_dashboard.py:7 - from uber_rides.auth import AuthorizationCodeGrant
results/rides-python-sdk/example/rider_dashboard.py:26 - """Index controller to redirect user to sign in with uber."""
results/rides-python-sdk/example/rider_dashboard.py:32 - """Connect controller to handle token exchange and query Uber API."""
results/rides-python-sdk/example/rider_dashboard.py:34 - # Exchange authorization code for acceess token and create session
